// given a right triangle Matrix ...starting from top you have to reach at bottom with minimum path sum .
plz note that bottom row has may be more than 1 element and you can choose any of them as final destination //

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();
        int m=triangle.get(n-1).size();
        int[][] dp= new int[n+1][n+1];
        for(int[] ar: dp){
            Arrays.fill(ar, -1);
        }
        return f(triangle,n-1, 0,0, dp);
    }
    public int f(List<List<Integer>> triangle,int n ,int start, int index, int[][] dp){
        
        if(start== n) 
            return triangle.get(start).get(index);
            
        // if(start>n-1 || index>triangle.get(start).size()-1)                           // it is out of bound base case we can use this to avoid out of limit value .
        //       return 1000000;                                                    // in this algorithm start and index will be in range by default so no nedd to check;
        
        if(dp[start][index] != -1) 
            return dp[start][index];
        int down= triangle.get(start).get(index) + f(triangle,n, start+1, index, dp);
        int dia= triangle.get(start).get(index) + f(triangle,n, start+1, index+1, dp);
        return dp[start][index]= Math.min(down, dia);
    }
}
