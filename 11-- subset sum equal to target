 
 
import java.util.*;

class TUF{
  public int solve(int []nums, int[][] dp,int n,int sum){
        if(n<0 || sum<0 )
            return 0;
        if(sum==0)
            return 1;
        if(dp[n][sum] != -1)
            return dp[n][sum];
            int k2=0;
        
          int k1= solve(nums,dp,n-1,sum) ;
          
            k2= solve(nums,dp,n-1,sum-nums[n]);
        return dp[n][sum]=k1|k2;
    }
static boolean subsetSumToK(int n, int k,int[] arr){
    
    int dp[][]=new int[n][k+1];
    for(int row[]: dp)
    Arrays.fill(row,-1);
    return solve(arr,dp,n-1,k);
}

public static void main(String args[]) {

  int arr[] = {1,2,3,4};
  int k=4;
  int n = arr.length;
                                 
  if(subsetSumToK(n,k,arr))
    System.out.println("Subset with given target found");
  else 
    System.out.println("Subset with given target not found");
}
}
