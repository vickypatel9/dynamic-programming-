
//  for positive integer only , not include 0.
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int solve(int []nums,int n,int k,int[][]dp){
        
       
         if(k==0)
        return 1;
        
      if(k<0||n<0)
        return 0;
      
        if(dp[n][k]!=-1)
        return dp[n][k];
        int k2=0;
        int k1=solve(nums,n-1,k,dp);
        
         k2=solve(nums,n-1,k-nums[n],dp);
        return dp[n][k]=k1+k2;
    }
    public static int findWays(int num[], int tar) {
        int n=num.length;
        int dp[][]=new int[n][tar+1];
        for(int []i:dp){
            Arrays.fill(i,-1);
        }
        int k=solve(num,n-1,tar,dp);
        return k;
    }
}


// for including 0..

import java.util.* ;
import java.io.*; 
public class Solution {
    int solve(int ind, int sum, int arr[], int dp[][]) {
        if(ind == 0) {                                  // we dont want to just stop when target become 0, because then we will miss cases when 0 also present in input
                                                                 // array . there for we will go till 0th index to include all 0 after sum become 0 whatever.
            if(sum == 0 && arr[0] == 0) return 2;
            if(sum == 0 || sum == arr[0]) return 1;
            return 0;
        }
        
        if(dp[ind][sum] != -1) return dp[ind][sum];
        
        int notPick = solve(ind-1, sum, arr, dp);
        int pick = 0;
        if(arr[ind] <= sum)                                   // we can neglect this condition if any base case is present so that our sum never become negative .
            pick = solve(ind-1, sum-arr[ind], arr, dp);
            
        return dp[ind][sum] = (pick+ notPick)%((int)(1e9)+7);
    }
    public static int findWays(int num[], int tar) {
        int n=num.length;
        int dp[][]=new int[n][tar+1];
        for(int []i:dp){
            Arrays.fill(i,-1);
        }
        int k=solve(n-1,tar,num,dp);
        return k;
    }
}
