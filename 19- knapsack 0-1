

class Solution 
{ 
   public static int solve(int w, int wt[], int val[], int n,int[][]dp){
      if(n==0){
          if(w>=wt[n]){
              return val[0];
          }
          else
          return 0;
      }
    
       
       if(dp[n][w]!=-1)
       return dp[n][w];
      
       
       int k1=0+solve(w,wt,val,n-1,dp);
       int k2=-(int)(1e9);
      
        if(w>=wt[n])
        k2=val[n]+solve(w-wt[n],wt,val,n-1,dp);
       return dp[n][w]=Math.max(k1,k2);
       
   }
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int dp[][]=new int [n][W+1];
        for(int i[]:dp){
            Arrays.fill(i,-1);
        }
        
        int k=solve(W,wt,val,n-1,dp);
         return k;
    } 
}


// tabulation form......
// bottom up dp .

import java.util.*;

class TUF{
static int knapsack(int[] wt,int[] val, int n, int W){
    
    int dp[][] = new int[n][W+1];
    
    //Base Condition
    
    for(int i=wt[0]; i<=W; i++){
        dp[0][i] = val[0];
    }
    
    for(int ind =1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){
            
            int notTaken = 0 + dp[ind-1][cap];
            
            int taken = Integer.MIN_VALUE;
            if(wt[ind] <= cap)
                taken = val[ind] + dp[ind-1][cap - wt[ind]];
                
            dp[ind][cap] = Math.max(notTaken, taken);
        }
    }
    
    return dp[n-1][W];
}

public static void main(String args[]) {

  int wt[] = {1,2,4,5};
  int val[] = {5,4,8,6};
  int W=5;
  
  int n = wt.length;
                                 
  System.out.println("The Maximum value of items, thief can steal is " 
  +knapsack(wt,val,n,W));
}
}
