
class Solution {
    public int solve(int[]nums,int tar,int index,int [][]dp){
     if(index==0){
         if(tar%nums[0]==0){
             return tar/nums[0];
         }else
         return (int)1e9;                // max return karne se wo wala subtree answer me nahi ayega jab Math.min() karenge to.
     }
     if(dp[index][tar]!=-1){
         return dp[index][tar];
     }
     int k1=0+solve(nums,tar,index-1,dp);
      int k2=(int)1e9;
      if(tar>=nums[index])
        k2=1+solve(nums,tar-nums[index],index,dp);
        return dp[index][tar]=Math.min(k1,k2);



    }
    public int coinChange(int[] coins, int amount) {
        int n=coins.length;
        int [][]dp=new int[n][amount+1];
        for(int []i:dp){
            Arrays.fill(i,-1);
        }
        int k=solve(coins,amount,n-1,dp);
        if(k!=(int)(1e9))
        return k;
        else
        return -1;
    }
}
