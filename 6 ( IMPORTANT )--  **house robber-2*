

class Solution {
    public int solve(int []nums,int index,int []dp){
        if(index==0){
            return nums[0];
        }
        if(index<0)
        return 0;
        if(dp[index]!=-1)
        return dp[index];
        int k1=nums[index]+solve(nums,index-2,dp);
        int k2=0+solve(nums,index-1,dp);
        return  dp[index]=Math.max(k1,k2);
    }
    public int rob(int[] nums) {
        int n=nums.length-1;
        
        
        
      // ****  we are breaking problem into two sub problem and solving them separatly to get the solution . *** 
        
        int temp1[]=new int[n];  // not taking first index in this array .
        
        int temp2[]=new int[n];// not taking last index  in this array .
        
        
        int p1=0;                    // index p1 to fill temp1 array   .
        int p2=0;
        if(n==0){
            return nums[0];
        }
        for(int i=0;i<n+1;i++){
            if(i!=0){
                temp1[p1++]=nums[i];
            }if(i!=n){
                temp2[p2++]=nums[i];
            }
        }
        int n1=temp1.length;
        int n2=temp2.length;
        
      int dp[]=new int [n1+1]; //
      
       Arrays.fill(dp,-1);
       int k1= solve(temp1,n1-1,dp);
       
       Arrays.fill(dp,-1);  // filling all element with -1 to use the same dp array for second array .
       int k2= solve(temp2,n2-1,dp);
       return Math.max(k1,k2);
    }
}
