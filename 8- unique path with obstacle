

class Solution {
    public int solve(int x,int y,int m,int n,int grid[][],int dp[][]){
        if(grid[0][0]==1)    // if obstacle occur at first position then impossible to reach at destination .
        return 0;
        if(x==m&&y==n){
            return 1;
        }
        if(x>m)
        return 0;
        if(y>n)
        return 0;
       
        if(grid[x][y]==1){
            return 0;
        }
        if(grid[m][n]==1){
            return 0;
        }
        
        if(dp[x][y]!=-1)
        return dp[x][y];
        int k1=0;
        int k2=0;
        
   k1=solve(x+1,y,m,n,grid,dp);
   k2=solve(x,y+1,m,n,grid,dp);
         
        
        return dp[x][y]=k1+k2;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int [][]dp=new int [m+1][n+1];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }
        return solve(0,0,m-1,n-1,obstacleGrid,dp);
    }
}
