


class Solution {
    public int solve(int x,int y,int m,int n,int [][]grid,int [][]dp){
        int k1=0;
        int k2=0;
        if(x==m&&y==n){
            return grid[x][y];
        }
        if(x>m){
            return Integer.MAX_VALUE;
        }
        if(y>n)
        return Integer.MAX_VALUE;
         if(dp[x][y]!=-1)
         return dp[x][y];
         k1=solve(x+1,y,m,n,grid,dp);
         k2=solve(x,y+1,m,n,grid,dp);
        return dp[x][y]=Math.min(k1,k2)+grid[x][y];
    }
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int [][]dp=new int [m+1][n+1];
      for(int i=0;i<m+1;i++){
          for(int j=0;j<n+1;j++){
              dp[i][j]=-1;
          }
      }
        return solve(0,0,m-1,n-1,grid,dp);
    }
}
