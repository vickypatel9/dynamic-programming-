Given a gold mine called M of (n x m) dimensions. Each field in this mine contains a positive integer which is the amount of gold in tons. Initially the miner can start from any row in the first column. From a given cell, the miner can move

-to the cell diagonally up towards the right 
-to the right
-to the cell diagonally down towards the right
Find out maximum amount of gold which he can collect.



class Solution{
    public static int gold(int n,int m,int mat[][],int i,int j,int[][]dp){
           if(j>=m || i>=n || i<0 || j<0) 
           return 0;
           
         if(dp[i][j]!=-1)
            return dp[i][j];
           
        int u=mat[i][j]+gold(n,m,mat,i-1,j+1,dp);
        int r=mat[i][j]+gold(n,m,mat,i,j+1,dp);
        int d=mat[i][j]+gold(n,m,mat,i+1,j+1,dp);
      
        
         dp[i][j]=Math.max(u,Math.max(r,d));
        return dp[i][j];
    }
    public static int solve (int n,int m, int mat[][]){
         int dp[][]=new int[n+1][m+1];
        int maxi=Integer.MIN_VALUE;
          for(int i[]:dp)
               { Arrays.fill(i,-1);
               }
       for(int i=0;i<n;i++){
            maxi=Math.max(maxi,gold(n,m,mat,i,0,dp));
       }
        
        return maxi;
    }
    static int maxGold(int n, int m, int mat[][])
    {
       return solve(n,m,mat);
    }
}
