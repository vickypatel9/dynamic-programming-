//*
s1=sum of elements present in this set
s2=sum of elements present int this set
therefor;
s1+s2=total sum
and given ;
s1-s2=D
so ;

total sum-2*s2=D
s2=( total sum-D)/2;

therefore we have to find all the subsets whose sum equal to s2 .

*// 
// ********  target is equal to s2 ***********

**  this algorithm works for 0 input also **  

ind-> index
k->target


class Solution{
    int mod = (int)1e9+7;
    int fun(int ind, int k, int arr[], int dp[][]) {
        if(ind == 0) {
            if(arr[0] == 0 && k == 0) return 2;
            if(k == 0 || k == arr[0]) return 1;
            return 0;
        } 
        
        if(dp[ind][k] != -1) return dp[ind][k];
        
        int notPick = fun(ind-1, k, arr, dp);
        int pick = 0;
        if(arr[ind] <= k)
            pick = fun(ind-1, k-arr[ind], arr, dp);
            
        return dp[ind][k] = (notPick + pick)%mod;
    }
    
    public int countPartitions(int n, int d, int arr[]){
        int sum = 0;
        for(int i=0;i<n;i++) sum+=arr[i];
        if((sum+d)%2 != 0) return 0;           //if odd then it means decimal value will come ,which is never possible from summing integer values .
                                               // we have taken +ve value so that we dont have to bother for negative cases .
        
        int k = (sum+d)/2;
        int dp[][] = new int[n][k+1];
        for(int i=0;i<n;i++)
            for(int j=0;j<=k;j++)
                dp[i][j] = -1;
        return fun(n-1, k, arr, dp);
    }
}
