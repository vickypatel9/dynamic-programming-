//*
s1=sum of elements present in this set
s2=sum of elements present int this set
therefor;
s1+s2=total sum
and given ;
s1-s2=D
so ;

total sum-2*s2=D
s2=( total sum-D)/2;

therefore we have to find all the subsets whose sum equal to s2 .

*// 
// ********  target is equal to s2 ***********

ind-> index
sum->target


class Solution{
     int solve(int ind, int sum, int arr[], int dp[][]) {
        if(ind == 0) {
            if(sum == 0 && arr[0] == 0) return 2;
            if(sum == 0 || sum == arr[0]) return 1;
            return 0;
        }
        
        if(dp[ind][sum] != -1) return dp[ind][sum];
        
        int notPick = solve(ind-1, sum, arr, dp);
        int pick = 0;
        if(arr[ind] <= sum)
            pick = solve(ind-1, sum-arr[ind], arr, dp);
            
        return dp[ind][sum] = (pick+ notPick)%((int)(1e9)+7);
    }

	public int perfectSum(int arr[],int n, int sum) 
	{   
	    int dp[][] = new int[n][sum+1];
	    for(int i=0;i<n;i++)
	        for(int j=0;j<=sum;j++)
	            dp[i][j] = -1;
	    return solve(n-1, sum, arr, dp);
	} 
}
