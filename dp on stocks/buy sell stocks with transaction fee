// you have to give transaction fee for each transaction .


class Solution {
     private int helper(int[] prices , int i , int canBuy , int[][] dp,int fee){
        if(i >= prices.length) return 0;
        
        if(dp[i][canBuy] != -1) return dp[i][canBuy];
        int profit = 0 ;
          int notTake=0;
        if(canBuy == 1){
            // int take = -prices[i] + helper(prices , i+1 , 0 , dp);
            // int notTake = helper(prices , i+1 , 1 , dp); 
            
            profit = Math.max(-prices[i] + helper(prices , i+1 , 0 , dp,fee), helper(prices , i+1 , 1 , dp,fee));
        }
        else{
            // int sell = prices[i] + helper(prices , i+1 , 1 , dp);
            // int notSell = helper(prices , i+1 , 0 , dp);
           profit= Math.max( prices[i] + -fee+helper(prices , i+1 , 1 , dp,fee) ,  helper(prices , i+1 , 0 , dp,fee));
        }
        
        return dp[i][canBuy]=profit;
    }
    public int maxProfit(int[] prices, int fee) {
          int[][] dp = new int[prices.length][2];
        for(int i=0 ; i<prices.length ; i++){
            dp[i][0] = -1;
            dp[i][1] = -1;
        }
        return helper(prices , 0 , 1 , dp,fee);
    }
}
