class Solution {
     int[][] dp;
    public int solve(int[][]ma,int row,int col){
        
         int k1=0,k2=0,k3=0;
        if( col<0 || col>=ma.length)
            return  (int)1e8;
        
         if(dp[row][col] != -1)
            return dp[row][col];
        
        if(row == ma.length-1){
            return ma[row][col];
        }
       
         

        
           
           k1=ma[row][col]+solve(ma,row+1,col-1);

            k2=ma[row][col]+solve(ma,row+1,col);
        
             k3=ma[row][col]+solve(ma,row+1,col+1);
            
             int k=Math.min(Math.min(k1,k2),k3);

        return dp[row][col]= k;

    }
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int m=matrix.length;
        int p=Integer.MAX_VALUE;
         dp=new int[matrix.length][matrix[0].length];
        for(int[] i: dp){
            Arrays.fill(i, -1);
        }
        for(int i=0;i<n;i++)
         p=Math.min(p,solve(matrix,0,i));
        return p;
    }
}
