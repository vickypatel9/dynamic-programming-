


Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.



class Solution {
    public int jump(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i = 0; i < nums.length; i++) {
            for(int j = 0; j <= nums[i] && i + j < nums.length; j++) {
                dp[i+j] = Math.min(dp[i+j], dp[i] + 1);                
            }
        }
        return dp[nums.length - 1];
    }
}

===========================  2   =================================================

class Solution {
    public int jump(int[] nums) {
        int n = nums.length;
        int[] dpArr = new int[n+1];
        Arrays.fill(dpArr,-1);
        return HelperFunc(0,nums,n,dpArr);
    }

    static int HelperFunc(int index,int[] nums,int n,int[] dpArr){
        // Base Case
        if(index >= n-1) return 0;

        if(dpArr[index] != -1) return dpArr[index];

        // Trying out all combinations
        int res = (int)1e9;
        for(int i = 1;i <= nums[index]; i++){
            if(index + i < n){
                int jumps = 1 + HelperFunc(index+i,nums,n,dpArr);
                res = Math.min(res,jumps);
            }
        }


        return dpArr[index] = res;
    }
}
