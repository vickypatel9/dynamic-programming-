//      Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character

////
public class Solution {
         public static int solve(String str1,String str2,int n1,int n2,int [][]dp){
              if(n1<0){
                 return n2+1;
              }
              if(n2<0){
                  return n1+1;
              }

              if(dp[n1][n2]!=-1){
                  return dp[n1][n2];

              }

              if(str1.charAt(n1)==str2.charAt(n2)){
                  return dp[n1][n2]=solve(str1,str2,n1-1,n2-1,dp);
              }

              return dp[n1][n2]=1+Math.min(Math.min(solve(str1,str2,n1,n2-1,dp),solve(str1,str2,n1-1,n2-1,dp)),solve(str1,str2,n1-1,n2,dp)  );




         }

    public static int editDistance(String str1, String str2) {
        int n1=str1.length();
        int n2=str2.length();
         int[][]dp=new int [n1][n2];
         for(int i=0;i<n1;i++){
             for(int j=0;j<n2;j++){
                 dp[i][j]=-1;
             }
         }

         return solve(str1,str2,n1-1,n2-1,dp);
    }
}
