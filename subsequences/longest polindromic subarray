// ********** diagonal traversal method   ***********//

public class Solution {	
	public static String longestPalinSubstring(String str) {
		int count=0;
		String ans="";
		int length=Integer.MIN_VALUE;
		boolean [][]dp=new boolean [str.length()][str.length()];
		for(int g=0;g<str.length();g++){
			for(int i=0,j=g;j<str.length();i++,j++){
			if(g==0)
			  dp[i][j]=true;
			else if(g==1)
			{ if(str.charAt(i)==str.charAt(j))
			dp[i][j]=true;
			else
			dp[i][j]=false;
			}
			else
      {
				if(str.charAt(i)==str.charAt(j)&&dp[i+1][j-1]==true)
				dp[i][j]=true;
				else
				dp[i][j]=false;
			}
      
			if(dp[i][j]==true)      // checking where dp array is true . element present at that point will be one of my answer .
			{ 
				if(j-i+1>length){
					ans=str.substring(i,j+1);
					length=j-i+1;
				}
			}
      
			}
		}
		return ans;
	}
}
